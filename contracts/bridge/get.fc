#include "storage.fc";
#include "../common/dic.fc";
#include "../common/stdlib.fc";
#include "../common/utils.fc";
#include "bridge_receipt_account-utils.fc";
#include "utils.fc";
#include "../gas.fc";

(slice) get_bridge_swap_address(slice jetton_address) method_id {
    load_storage();
    (slice jetton_swap_address, _) = storage::bridge_swap_address_dic.dict_get?(KEY_LENGTH, jetton_address);
    return jetton_swap_address;
}

(slice) get_bridge_pool_address(slice jetton_address) method_id {
    load_storage();
    (slice jetton_pool_address, _) = storage::bridge_pool_address_dic.dict_get?(KEY_LENGTH, jetton_address);
    return jetton_pool_address;
}

(int) get_is_jetton_support(int target_chain_id, slice jetton_address) method_id {
    load_storage();
    var token_whitelist = storage::jetton_whitelist_dic;
    var key_hash = create_key(target_chain_id, jetton_address);
    (slice whitelist, int is_support) = udict_get?(token_whitelist, DEFAULT_KEY_LENGTH, key_hash);
    return is_support;
}

(int) is_bridge_paused() method_id {
    load_storage();
    return storage::is_pause;
}

(slice) get_target_contract_address(int target_chain_id) method_id {
    load_storage();
    (slice target_contract, _) = storage::target_contract_dic.udict_get?(32, target_chain_id);
    return target_contract;
}

(slice) get_oracle_address() method_id {
    load_storage();
    return storage::oracle_address;
}

(slice) get_owner() method_id {
    load_storage();
    return storage::owner;
}

(slice) get_admin() method_id {
    load_storage();
    return storage::admin;
}

(slice) get_pause_controller() method_id {
    load_storage();
    return storage::pause_controller;
}

(slice) get_bridge_receipt_address(slice owner_address, slice jetton_address) method_id {
    load_storage();
    (slice jetton_pool_address, _) = storage::bridge_pool_address_dic.dict_get?(KEY_LENGTH, jetton_address);
    cell acc_state_init = calculate_bridge_receipt_account_state_init(owner_address, jetton_pool_address, jetton_address, my_address(), storage::bridge_receipt_account_code);
    slice brigde_receipt_address = calculate_bridge_receipt_account_address(acc_state_init);
    return brigde_receipt_address;
}

(cell) get_upgrade_status() method_id {
    load_storage();
    return storage::temp_upgrade;
}

;; (int) get_estimate_create_receipt_fee() method_id {
;;     return calculate_create_receipt_process_fee();
;; }
;; 
;; (int) get_estimate_swap_fee() method_id {
;;     return calculate_swap_process_fee();
;; }
;; 
;; (int) get_estimate_record_receipt_fee() method_id {
;;     return calculate_receipt_process_fee();
;; }
;; 
;; (int) get_estimate_lock_fee() method_id {
;;     return calculate_lock_process_fee();
;; }
;; 
;; (int) get_estimate_record_swap_fee() method_id {
;;     return calculate_record_swap_process_fee();
;; }

;; (int) get_estimate_storage_fee() method_id {
;;     return calculate_bridge_receipt_account_min_storage_fee();
;; }