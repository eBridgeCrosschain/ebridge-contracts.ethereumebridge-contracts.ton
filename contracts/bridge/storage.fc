#include "../common/stdlib.fc";
;; `bridge_swap_address_dic` is HashMap with `jetton master address` slice key, value is `bridge_swap_address:slice`
global cell storage::bridge_swap_address_dic; 
;; `bridge_pool_address_dic` is HashMap with `jetton master address` slice key, value is `bridge_pool_address:slice`
global cell storage::bridge_pool_address_dic;
;; ·jetton_white_list_dic· is HashMap with `jetton master address,target_chain_id` int key,value is `is_support:int`
;; 0:not support 1:support
global cell storage::jetton_whitelist_dic; 
global slice storage::oracle_address;
global int storage::is_pause;
global slice storage::pause_controller;
;; multiSign
global slice storage::admin;
global slice storage::owner;
global cell storage::temp_upgrade;
global cell storage::bridge_receipt_account_code;
global cell storage::target_contract_dic;

() load_storage() impure inline {
    slice ds = get_data().begin_parse();
    storage::bridge_swap_address_dic = ds~load_dict();
    storage::bridge_pool_address_dic = ds~load_dict();
    storage::jetton_whitelist_dic = ds~load_dict();
    storage::oracle_address = ds~load_msg_addr();
    cell ds_0 = ds~load_ref();
    slice ds_slice = ds_0.begin_parse();
    storage::admin = ds_slice~load_msg_addr();
    storage::owner = ds_slice~load_msg_addr();
    storage::pause_controller = ds~load_msg_addr();
    storage::is_pause = ds~load_uint(1);
    storage::temp_upgrade = ds~load_ref();
    storage::bridge_receipt_account_code = ds~load_ref();
    storage::target_contract_dic = ds~load_dict();
}

() save_storage() impure inline {
    set_data(begin_cell()
        .store_dict(storage::bridge_swap_address_dic)
        .store_dict(storage::bridge_pool_address_dic)
        .store_dict(storage::jetton_whitelist_dic)
        .store_slice(storage::oracle_address)
        .store_uint(storage::is_pause, 1)
        .store_ref(begin_cell().store_slice(storage::admin).store_slice(storage::owner).end_cell())
        .store_slice(storage::pause_controller)
        .store_ref(storage::temp_upgrade)
        .store_ref(storage::bridge_receipt_account_code)
        .store_dict(storage::target_contract_dic)
    .end_cell());
}