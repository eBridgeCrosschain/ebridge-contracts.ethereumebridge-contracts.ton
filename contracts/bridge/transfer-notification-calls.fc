#include "../common/jetton-utils.fc";
#include "../common/stdlib.fc";
#include "../common/message.fc";
#include "../common/dic.fc";
#include "errors.fc";
#include "storage.fc";
#include "op.fc";

() handle_transfer_notification(slice sender_address, int query_id, int jetton_amount, slice from_sender, cell ref_cs, int fwd_fee) impure {
    var ref_ds = ref_cs.begin_parse();
    int transfer_op = ref_ds~load_uint(32);
    throw_unless(INVALID_AMOUNT, jetton_amount > 0);

    if (storage::is_pause) {
        var body = create_simple_transfer_body(query_id, 0, jetton_amount, from_sender);
        body = body.store_uint(transfer_bounce_paused, 32);
        send_simple_message(0, sender_address, body.end_cell(), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        return ();
    }

    if (transfer_op == create_receipt) {
        (int target_chain_id, slice target_address, slice jetton_address) = (ref_ds~load_uint(32), ref_ds~load_bits(256), ref_ds~load_msg_addr());
        var token_whitelist = storage::jetton_whitelist_dic;
        (int wc, int jetton_address_hash) = parse_std_addr(jetton_address);
        var key_builder = begin_cell()
            .store_uint(wc, 8)
            .store_uint(target_chain_id, 32)
            .store_uint(jetton_address_hash, 256)
            .end_cell();
        var key_hash = cell_hash(key_builder);
        (_, int is_support) = idict_get?(token_whitelist, KEY_LENGTH, key_hash);
        if (~ is_support) {
            var body = create_simple_transfer_body(query_id, 0, jetton_amount, from_sender);
            body = body.store_uint(transfer_bounce_token_not_support, 32);
            send_simple_message(0, sender_address, body.end_cell(), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
            return ();
        }

        ;; Transfer to jetton pool
        (var jetton_pool_address, int found) = dict_get?(storage::bridge_pool_address_dic, KEY_LENGTH, jetton_address);
        if (~ found) {
            var body = create_simple_transfer_body(query_id, 0, jetton_amount, from_sender);
            body = body.store_uint(transfer_bounce_token_pool_not_exist, 32);
            send_simple_message(0, sender_address, body.end_cell(), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
            return ();
        }

        var payload = begin_cell()
            .store_uint(lock, 32)
            .store_uint(target_chain_id, 32)
            .store_slice(target_address)
            .store_slice(from_sender)
            .end_cell();
        var body = create_with_payload_transfer_body(query_id, fwd_fee, jetton_amount, jetton_pool_address, payload);
        send_simple_message(0, jetton_pool_address, body.end_cell(), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);

    }
}